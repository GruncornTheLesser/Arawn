#version 450
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

#define TILE_SIZE 16
#define MAX_LIGHTS_PER_TILE 127

struct Light { 
	vec3 position; // position + radius
	float radius;
	vec3 colour;
	float intensity; 
};

struct Frustum {
	vec4 planes[4];
};

struct Cluster {
	uint light_count;
	uint indices[MAX_LIGHTS_PER_TILE];
};

layout(std140, set=0, binding=0) uniform Camera {
    mat4 proj;
    mat4 view;
    mat4 inv_proj;
    uvec2 screen_size;
	float near;
	float far;
    vec3 eye;
};

layout(std430, set=1, binding=0) buffer Lights {
    uvec3 cluster_count;
    uint light_count;
    Light lights[];
};

layout(std430, set=1, binding=1) buffer Frustums {
	Frustum frustums[];
};

layout(std430, set=1, binding=2) buffer Clusters {
	Cluster clusters[]; // indices[0] = count;
};

layout(set=1, binding = 3) uniform sampler2D depth_sampler;


float linearize_depth(float depth) {
    return (near * far) / (far - depth * (far - near));
}

bool sphere_inside_plane(vec3 pos, float rad, vec4 plane) {
	return dot(plane.xyz, pos) - plane.w < -rad;
}

bool sphere_inside_frustum(Light light, Frustum frustum, float z_near, float z_far) {
	const float bias = 2.0f;
	vec4 position = (view * vec4(light.position.xyz, 1));
	float z = -position.z;
	light.radius += bias;
	if (z + light.radius < z_near || z - light.radius > z_far) { 
		return false;
	}
	// if sphere insides Frustum plane
	for (uint i = 0; i < 4; ++i) {
		if (sphere_inside_plane(position.xyz, light.radius, frustum.planes[i])) {
			return false;
		}
	}
	
	return true;
}


layout (local_size_x = TILE_SIZE, local_size_y = TILE_SIZE) in;

void main() {
	float depth = texelFetch(depth_sampler, ivec2(gl_GlobalInvocationID.xy), 0).r;
	depth = linearize_depth(depth); // linearize first to get better comparison

	float z_far = subgroupMax(depth);  // min
	float z_near = subgroupMin(depth); // max 

	if (!subgroupElect()) {
		return;
	}
	
	uint cluster_index = gl_WorkGroupID.x + 
						 gl_WorkGroupID.y * gl_NumWorkGroups.x;

	uint count = 0;
	for (uint light_index = 0; light_index < light_count; ++light_index) {
		if (sphere_inside_frustum(lights[light_index], frustums[cluster_index], z_near, z_far)) { 
			clusters[cluster_index].indices[count] = light_index;
			if (++count == MAX_LIGHTS_PER_TILE) {
				break;
			}
		}
	}

	clusters[cluster_index].light_count = count;
}